import { NashModel } from './../../interfaces/model.interface';
import { ICartesian } from './cartesian.interface';
import NashCanvas from './../../utils/classes/nash-canvas';
export default class Cartesian implements NashModel {
    private cnv?;
    private ctx?;
    private settings;
    private cnvSettings;
    private grid_size_x;
    private grid_size_y;
    private num_lines_x;
    private num_lines_y;
    private currentWidth;
    private currentHeight;
    private animationDuration;
    private width;
    private height;
    private label_x;
    private label_y;
    private graphs;
    private translation;
    private currentInterval;
    isAnimating: boolean;
    isAnimatingReverse: boolean;
    private GRID_SIZE;
    private COLORS;
    constructor();
    add(nashCanvas: NashCanvas<RenderingContext>): void;
    draw2D(width: number, height: number, seconds?: number): void;
    animate(): void;
    private drawX;
    private drawY;
    private drawXTicks;
    private drawYTicks;
    private centerOrigin;
    private setOrigin;
    translate(x: number, y: number): void;
    backToMid(): void;
    setInterval(interval: number[]): void;
    getInterval(): number[];
    showGrid(toggle: boolean): void;
    showGridX(toggle: boolean): void;
    showGridY(toggle: boolean): void;
    setSettings(options: ICartesian): void;
    private getCanvas;
    private clearRect;
    transfer(canvas: HTMLCanvasElement, context: RenderingContext): void;
    getNashInfo(): string;
    addGraph2D(exp: string, animDuration?: number): void;
    removeGraph2D(exp: string): void;
    private plotGraph2D;
}
//# sourceMappingURL=index.d.ts.map